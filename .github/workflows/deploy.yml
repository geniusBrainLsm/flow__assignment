name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:   # 수동 실행 추가


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.5

      # - name: Run tests
      #   run: gradle test

      - name: Build with Gradle
        run: gradle bootJar

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 기존 수동 배포 디렉토리로 이동
            cd /home/ubuntu/file-extension-api/flow__assignment
            
            echo "현재 디렉토리 확인:"
            pwd
            ls -la
            
            # 최신 코드 가져오기
            echo "Git pull 실행..."
            git pull origin main
            
            # 환경변수 설정
            export SPRING_PROFILES_ACTIVE=prod
            echo "환경변수 설정 확인:"
            echo "SPRING_PROFILES_ACTIVE: $SPRING_PROFILES_ACTIVE"
            
            # Docker Compose 파일 확인
            echo "Docker Compose 파일 확인:"
            ls -la docker-compose*.yml
            
            # 기존 컨테이너 정리 및 재시작
            echo "기존 컨테이너 정리..."
            docker-compose down || true
            
            echo "새 컨테이너 시작..."
            docker-compose up -d --build
            
            # 컨테이너 상태 확인
            echo "컨테이너 상태 확인:"
            sleep 15
            docker-compose ps
            
            # 최근 애플리케이션 로그 확인
            echo "최근 애플리케이션 로그:"
            docker-compose logs --tail=20 app
            
            # 퍼블릭 IP로 접근 테스트
            echo "퍼블릭 IP 접근 테스트..."
            PUBLIC_IP=$(curl -s http://checkip.amazonaws.com)
            echo "✅ 퍼블릭 IP 접근: http://$PUBLIC_IP:8080"
            
            # 배포 완료
            echo "🎉 배포 완료!"
            echo "🌐 서비스 URL: http://$PUBLIC_IP:8080"
            echo "📋 API 엔드포인트:"
            echo "  - 확장자 목록: http://$PUBLIC_IP:8080/api/extensions"
            echo "  - 파일 업로드: http://$PUBLIC_IP:8080/api/upload/file"
            echo "  - 파일 검증: http://$PUBLIC_IP:8080/api/upload/check"
